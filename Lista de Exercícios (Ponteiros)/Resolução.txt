Nome: JHONNATHA FELIPE SOLSONA DE SOUZA
Matrícula: 20200069905

Questão 1:

p == &i;
Resposta:  1.
Explicação:
- O valor da expressão é referente a condição da igualidade, no caso ela é satisfeita, uma vez que o "endereço" '&i' havia sido atribuído ao ponteiro 'p' anteriormente (linha 09).

*p - *q;
Resposta: -2.
Explicação:
- Quando utilizamos asterisco antes de um ponteiro que foi declarado, obtemos o valor presente no endereço que lhe foi atribuído anteriormente (linha 09). Portanto a operação é: *p (3) - *q (5) = -2 (resultado).

**&p;   
Resposta:  3.
Explicação:
- A expressão representa um ponteiro para o ponteiro no endereço de p. Portanto lhe printar com asterisco antes também retorna o valor de p (3).

3 - *p/(*q) + 7;
Resposta: 10.
Explicação:
- A mesma explicação referente a segunda e terceira expressão também se aplica aqui. Portanto a operação é o mesmo que: 3 - 3 / 5 + 7. Se reparar bem 3/5, apesar de resultar em 0.6 retorna 0, já que estamos operando com números inteiros. Resultando em: 3 - 0 + 7 = 10. 
---------------------------
Questão 2:

Resposta: 4094 7 5 15 9
Explicação:
- Primeiro elemento: Foi dito no enunciado da questão que o endereço de 'i' seria 4094.
- Segundo elemento: 5 (*p) + 2 = 7.
- Terceiro elemento: A expressão representa um ponteiro para o ponteiro no endereço de p. Portanto lhe printar com asterisco antes também retorna o valor de p (5).
- Quarto elemento: 3 * 5 (*p) = 15.
- Quinto elemento: 5 (**&p) + 4 = 9. 
---------------------------
Questão 3:

Resposta: As únicas atribuições ilegais, foram as 1ª, 4ª e 7ª atribuições. 
Explicação:
- O 1ª e 7ª pela tentativa de atribuição de inteiro para ponteiro de inteiro.
- O 4ª graças a utilização dos parênteses.
---------------------------
Questão 4:

Resposta: Todos resultados obtidos foram idênticos aos esperados (TeoriaxPratica).
Explicação:
- (a) O elemento valor retornou como saída 20, graças a atribuição que foi feito ao ponteiro p1, que apontava para o endereço de valor.
- (b) O elemento temp retornou como saída 29.0, graças a atribuição que foi feito ao ponteiro p2, que apontava para o endereço de temp.
- (c) O elemento aux retornou P uma vez que foi realizada o "apontamento" para primeira posição (nome[0]) do ponteiro de char nome ("Ponteiro").
- (d) O elemento aux retornou e uma vez que foi realizada o "apontamento" para quinta posição (nome[4]) do ponteiro de char nome ("Ponteiro").
- (e) O elemento p3 retornou P, já que quando igualado ao ponteiro para char nome ("Ponteiro"), utilizou o endereço da primeira letra.
- (f) O elemento p3 + 4 retorna e, já que quando igualado ao ponteiro p3 que era igual ao ponteiro para char nome ("Ponteiro"), utilizou o endereço da primeira letra + 4 ou seja, o quarto elemento a partir do endereço de memória 0.
- (g) p3--, como esperado retornou t, que segue a mesma logica da questão (f), porém sendo o endereço do terceiro elemento.
- (h) O retorno é o elemento 0 da variável vetor (graças a atribuição do valor do ponteiro p4 para variável idade), ou seja 31.
- (i) O retorno é o elemento 1 da variável vetor (graças a atribuição do valor do ponteiro p5 para variável idade, p5 é p4 mais um endereço a diante), ou seja 45.
- (j) O retorno é o elemento 2 da variável vetor (graças a atribuição do valor do ponteiro p4 para variável idade, p4 é p5 mais um endereço a diante), ou seja 27.
- (l) O retorno é o elemento 0 da variável vetor (graças a atribuição do valor do ponteiro p4 para variável idade, p4 é p4 menos dois endereço para trás), ou seja 31.
- (m) O retorno é o elemento 1 da varíavel vetor (graças a atribuição do valor, sendo a adição do elemento 27 menos 1 endereço de memória), ou seja 45.
- (n) O retorno foi 27, já que p5 era 45 (segundo elemento de vetor) e foi adicionado um endereço de memória para variável.
---------------------------
Questão 5:

Resposta: Todos resultados obtidos foram idênticos aos esperados (TeoriaxPratica).
---------------------------
Questão 6:

Resposta: *(pulo + 2) e pulo + 2.
Explicação:
- *(pulo + 2) retorna o terceiro elemento.
- pulo + 2 retorna o endereço do terceiro elemento.
---------------------------
Questão 7:

Resposta: As expressões válidas são: 'p = mat + 1' e 'x = (*mat)++'.
---------------------------
Questão 8:

Resposta: Ambos programas fazem um loop entre os números do array declarado como vet, o primeiro programa printa os valores e o segundo os endereços.
---------------------------
Questão 9:
Resposta:
◦ x for declarado como char?
x+1 = 4093, x+2 = 4094 e x+3 = 4095. 
◦ x for declarado como int?
x+1 = 4094, x+2 = 4096 e x+3 = 4098.
◦ x for declarado como float?
x+1 = 4096, x+2 = 5000 e x+3 = 5002.
◦ x for declarado como double?
x+1 = 5000, x+2 = 5008 e x+3 = 5012.
---------------------------
Questão 10:

Resposta: As respostas obtidas foram idênticas ao que foi idealizado.
---------------------------
Questão 11:

Resposta: As seguintes expressões foram válidas: aloha = value; coisas[5] = aloha; pf = value;.
---------------------------
Questão 12:

Resposta: Um ponteiro para uma função é um conceito de programação que permite armazenar o endereço de memória de uma função em uma variável. Em outras palavras, em vez de chamar uma função diretamente pelo seu nome, você pode usar um ponteiro para executar essa função. Isso pode ser útil em situações em que você deseja selecionar dinamicamente qual função deve ser executada com base em alguma condição ou critério.
---------------------------
Questão 13:

Resposta:
#include <stdio.h>
#include <stdlib.h>

void crescente(float n)
{
  float *v, aux;
  int i, j;
  v = (float *)malloc(n * sizeof(float));

  printf("Digite os valores: \n");
  for (i = 0; i < n; i++)
  {
    scanf("%f", &v[i]);
  }

  printf("\n");

  for (i = 0; i < n; i++)
  {
    for (j = i; j < n; j++)
    {
      if (v[i] > v[j])
      {
        aux = v[i];
        v[i] = v[j];
        v[j] = aux;
      }
    }
  }
  // Em ordem Crescente
  for (i = 0; i < n; i++)
  {
    printf("%f \n", v[i]);
  }

  free(v);
}

int main(void)
{
  int x;
  printf("Quantos valores deseja digitar? \n");
  scanf("%d", &x);
  crescente(x);
  return 0;
}
---------------------------
Questão 14:

Resposta:
#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b)
{ // Variáveis ponteiro para void, podendo conter qualquer tipo de endereço.

  return (*(int *)a - *(int *)b); // Realização de onversão "ponteiro para void" para "ponteiro para int" e recurar o valor da posição. Se o retorno for maior que 0, o qsort realiza a troca de posiçao.
}

void crescente(float n)
{
  float *valores, aux;
  int i, j;
  valores = (float *)malloc(n * sizeof(float)); // Alocando o vetor.

  printf("Digite os valores: \n");
  for (i = 0; i < n; i++)
  {
    scanf("%f", &valores[i]); // Informando os valores.
  }

  printf("\n");

  qsort(valores, n, sizeof(float), compare); // Valores é o endereço do Array; n é o tamanho do Array (quantidade); sizeof(float) é o tamanho em bytes de cada posição do Array; compare é a funçao de comparação, que recebe dois ponteiros para const void.

  // Imressão Em ordem crescente.
  for (i = 0; i < n; i++)
  {
    printf("%f \n", valores[i]);
  }

  free(valores);
}

int main(void)
{
  int x;
  printf("Quantos valores deseja digitar? \n");
  scanf("%d", &x);
  crescente(x);
  return 0;
}
---------------------------
Questão 15:

Resposta:
#include <stdio.h>
#include <stdlib.h>

int compare2(const void *a, const void *b)
{
  if (*(int *)a > *(int *)b)
  { // Se a for maior que b, retorna 1.
    return 1;
  }
  else if (*(int *)a < *(int *)b)
  { // Se a for menor que b, retorna -1.
    return -1;
  }
  else
  {
    return 0; // Se a for igual a b, retirna 0.
  }
}

void crescente(float n)
{
  float *valores, aux;
  int i, j;
  valores = (float *)malloc(n * sizeof(float));

  printf("Digite os valores: \n");
  for (i = 0; i < n; i++)
  {
    scanf("%f", &valores[i]);
  }

  printf("\n");

  qsort(valores, n, sizeof(float), compare2);

  // Saída em ordem crescente.
  for (i = 0; i < n; i++)
  {
    printf("%f \n", valores[i]);
  }

  free(valores);
}

int main()
{
  int x;
  printf("Quantos valores deseja digitar? \n");
  scanf("%d", &x);

  crescente(x);

  return 0;
}
---------------------------
Questão 16:

Resposta:
Função clock() e a macro CLOCKS_PER_SEC
A função clock retorna o tempo de execução exato do momento em que ela foi chamada. 
Para encontrar o tempo de execução de um programa precisamos usar ela duas vezes, 
uma para capturar o tempo inicial e outra para capturar o tempo final da execução.

clock_t t; //variável para armazenar tempo
t = clock(); //armazena tempo
crescente(x);

t = clock() - t; //tempo final - tempo inicial
printf("Tempo de execucao: %lf", ((double)t)/((CLOCKS_PER_SEC))); //imprime o tempo em segundos na tela, com conversão para double

Tempo de execução do programa da questao 13: 3,7s 
Tempo de execução do programa da questao 14: 3,9s 
Tempo de execução do programa da questao 15: 3,5s

O tempo de execução das questoes anterios não tem uma diferença significativa.
---------------------------